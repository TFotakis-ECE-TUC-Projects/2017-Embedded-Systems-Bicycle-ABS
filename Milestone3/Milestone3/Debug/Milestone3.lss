
Milestone3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000466  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800108  00800108  00000502  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000085f  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069b  00000000  00000000  00000e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000400  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000476  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031b  00000000  00000000  00001ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002211  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_1>
   8:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 27 02 	call	0x44e	; 0x44e <main>
  9e:	0c 94 31 02 	jmp	0x462	; 0x462 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADCinit>:
uint32_t rearWheelPeriod = -1;
int checkWheelsFrequenciesReturnValue=0;

// Initializes the ADC component to convert the ACD0 input with a 128 prescaler and auto conversion
 void ADCinit(){
	ADMUX = 1 << REFS0; // AVCC with external capacitor at AREF pin, ADC0 selected
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
	ADMUX |= 1<<ADLAR; // ADC Left Adjust Result to use ADCH register for 8-bit operations (ignore 2 Least Significant Bits)
  ae:	80 81       	ld	r24, Z
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	80 83       	st	Z, r24
	ADCSRA = 1 << ADEN; // Analog to Digital Enable
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADATE; // Auto Trigger Enable Conversion
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADIE; // ADC Conversion Complete Interrupt activated
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // Set prescaler to clk/128
  c8:	80 81       	ld	r24, Z
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADSC; // Start Conversions
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <MicrosTimerInit>:
}

// Initializes Timer/Counter2 in CTC mode to trigger an interrupt every 160 clock ticks or 10 us
void MicrosTimerInit(){
	TCCR2A = 1<<WGM21; // Set Timer 2 to CTC mode, TOP = OCR2A, Immediate update of OCR2A, TOV Flag set on MAX, Normal port operation, OC2A disconnected
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = 1 << CS21; // Set prescaler to clk/8
  dc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK2 = 1 << OCIE2A; // Enable CTC interrupt
  e0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	OCR2A = 20; // Set TOP value to 20
  e4:	84 e1       	ldi	r24, 0x14	; 20
  e6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  ea:	08 95       	ret

000000ec <PhotoInterruptersInit>:
}

// Initializes the front and rear Photo-Interrupter Sensors on INT0 & INT1 respectively to trigger interrupts on any of their state change
void PhotoInterruptersInit(){
	EIMSK = 1<<INT1 | 1<<INT0; // Enable INT0 and INT1
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0<<ISC11 | 1<<ISC10 | 0<<ISC01 | 1<<ISC00; // Trigger INT0 and INT1 on any state change
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  f6:	08 95       	ret

000000f8 <ServoPWMinit>:
}

// Initializes PWM signal on PB1 & PB2 for front & back servo respectively
void ServoPWMinit(){
	DDRB = 1<<DDB1 | 1<<DDB2; // Set PB1 & PB2 as outputs for OC1A and OC1B respectively
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	84 b9       	out	0x04, r24	; 4
	TCCR1A=1<<COM1A1 | 1<<COM1B1 | 1<<WGM11; //Non-Inverting mode - Set OC1A/OC1B on compare match when up-counting. Clear OC1A/OC1B on compare match when down counting.
  fc:	82 ea       	ldi	r24, 0xA2	; 162
  fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B=1<<WGM13 | 1<<WGM12; // Fast PWM
 102:	e1 e8       	ldi	r30, 0x81	; 129
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	88 e1       	ldi	r24, 0x18	; 24
 108:	80 83       	st	Z, r24
	TCCR1B|=1<<CS11; // Set prescaler to clk/8
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24
	ICR1=40000;	// PWM Frequency = 50Hz (Period = 20ms Standard).
 110:	80 e4       	ldi	r24, 0x40	; 64
 112:	9c e9       	ldi	r25, 0x9C	; 156
 114:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 118:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 11c:	08 95       	ret

0000011e <checkWheelsFrequencies>:
// Returns 0 when equal, 1 when Front Frequency < Rear Frequency, -1 when Rear Frequency< Front Frequency
void checkWheelsFrequencies(){
	// If there are no new pulse periods measurements return the last decision
	// Considers the state when the bike is stopped and no pulses are sent from the servos
	// but still want to brake
	if (frontWheelPeriod == -1 || rearWheelPeriod == -1) return;
 11e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <frontWheelPeriod>
 122:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <frontWheelPeriod+0x1>
 126:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <frontWheelPeriod+0x2>
 12a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <frontWheelPeriod+0x3>
 12e:	8f 3f       	cpi	r24, 0xFF	; 255
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	92 07       	cpc	r25, r18
 134:	a2 07       	cpc	r26, r18
 136:	b2 07       	cpc	r27, r18
 138:	09 f4       	brne	.+2      	; 0x13c <checkWheelsFrequencies+0x1e>
 13a:	41 c0       	rjmp	.+130    	; 0x1be <checkWheelsFrequencies+0xa0>
 13c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 140:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 144:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
 148:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
 14c:	4f 3f       	cpi	r20, 0xFF	; 255
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	52 07       	cpc	r21, r18
 152:	62 07       	cpc	r22, r18
 154:	72 07       	cpc	r23, r18
 156:	99 f1       	breq	.+102    	; 0x1be <checkWheelsFrequencies+0xa0>
	int32_t difference = frontWheelPeriod-rearWheelPeriod;
 158:	84 1b       	sub	r24, r20
 15a:	95 0b       	sbc	r25, r21
 15c:	a6 0b       	sbc	r26, r22
 15e:	b7 0b       	sbc	r27, r23
	// Reinitialize for the new measurements
	frontWheelPeriod=-1;
 160:	4f ef       	ldi	r20, 0xFF	; 255
 162:	5f ef       	ldi	r21, 0xFF	; 255
 164:	ba 01       	movw	r22, r20
 166:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <frontWheelPeriod>
 16a:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <frontWheelPeriod+0x1>
 16e:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <frontWheelPeriod+0x2>
 172:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <frontWheelPeriod+0x3>
	rearWheelPeriod=-1;
 176:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 17a:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
 17e:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_start+0x2>
 182:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_start+0x3>
	if(difference>DIFFERENCE_THRESHOLD) checkWheelsFrequenciesReturnValue = 1;
 186:	83 33       	cpi	r24, 0x33	; 51
 188:	91 05       	cpc	r25, r1
 18a:	a1 05       	cpc	r26, r1
 18c:	b1 05       	cpc	r27, r1
 18e:	3c f0       	brlt	.+14     	; 0x19e <checkWheelsFrequencies+0x80>
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 198:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 19c:	08 95       	ret
	else if (difference<-DIFFERENCE_THRESHOLD) checkWheelsFrequenciesReturnValue = -1;
 19e:	8e 3c       	cpi	r24, 0xCE	; 206
 1a0:	9f 4f       	sbci	r25, 0xFF	; 255
 1a2:	af 4f       	sbci	r26, 0xFF	; 255
 1a4:	bf 4f       	sbci	r27, 0xFF	; 255
 1a6:	3c f4       	brge	.+14     	; 0x1b6 <checkWheelsFrequencies+0x98>
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	9f ef       	ldi	r25, 0xFF	; 255
 1ac:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 1b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 1b4:	08 95       	ret
	else checkWheelsFrequenciesReturnValue = 0;
 1b6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 1ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 1be:	08 95       	ret

000001c0 <setServoPosition>:
}

// Sets the Servo PWM duty cycle to PB1 & PB2 for controlling the front & rear servo
// MinValue = 0 - MaxValue = 235 
void setServoPosition(int value){
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	d8 2f       	mov	r29, r24
 1c6:	c9 2f       	mov	r28, r25
	checkWheelsFrequencies();
 1c8:	0e 94 8f 00 	call	0x11e	; 0x11e <checkWheelsFrequencies>
 1cc:	8d 2f       	mov	r24, r29
 1ce:	9c 2f       	mov	r25, r28
 1d0:	99 23       	and	r25, r25
 1d2:	14 f4       	brge	.+4      	; 0x1d8 <setServoPosition+0x18>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	8c 3e       	cpi	r24, 0xEC	; 236
 1da:	91 05       	cpc	r25, r1
 1dc:	14 f0       	brlt	.+4      	; 0x1e2 <setServoPosition+0x22>
 1de:	8b ee       	ldi	r24, 0xEB	; 235
 1e0:	90 e0       	ldi	r25, 0x00	; 0
	if(value>235) value=235; else if(value<0) value=0; // Check for valid value boundaries
	OCR1A = 1000 + (checkWheelsFrequenciesReturnValue == 1 ? 0 : value<<4); // If front frequency < rear frequency cut the front brake down, else apply the value
 1e2:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 1e6:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 1ea:	21 30       	cpi	r18, 0x01	; 1
 1ec:	31 05       	cpc	r19, r1
 1ee:	51 f0       	breq	.+20     	; 0x204 <setServoPosition+0x44>
 1f0:	9c 01       	movw	r18, r24
 1f2:	22 95       	swap	r18
 1f4:	32 95       	swap	r19
 1f6:	30 7f       	andi	r19, 0xF0	; 240
 1f8:	32 27       	eor	r19, r18
 1fa:	20 7f       	andi	r18, 0xF0	; 240
 1fc:	32 27       	eor	r19, r18
 1fe:	28 51       	subi	r18, 0x18	; 24
 200:	3c 4f       	sbci	r19, 0xFC	; 252
 202:	02 c0       	rjmp	.+4      	; 0x208 <setServoPosition+0x48>
 204:	28 ee       	ldi	r18, 0xE8	; 232
 206:	33 e0       	ldi	r19, 0x03	; 3
 208:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 20c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 1000 + (checkWheelsFrequenciesReturnValue == -1 ? 0 : value<<4); // If rear frequency < front frequency cut the front brake down, else apply the value
 210:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 214:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 218:	2f 3f       	cpi	r18, 0xFF	; 255
 21a:	3f 4f       	sbci	r19, 0xFF	; 255
 21c:	49 f0       	breq	.+18     	; 0x230 <setServoPosition+0x70>
 21e:	82 95       	swap	r24
 220:	92 95       	swap	r25
 222:	90 7f       	andi	r25, 0xF0	; 240
 224:	98 27       	eor	r25, r24
 226:	80 7f       	andi	r24, 0xF0	; 240
 228:	98 27       	eor	r25, r24
 22a:	88 51       	subi	r24, 0x18	; 24
 22c:	9c 4f       	sbci	r25, 0xFC	; 252
 22e:	02 c0       	rjmp	.+4      	; 0x234 <setServoPosition+0x74>
 230:	88 ee       	ldi	r24, 0xE8	; 232
 232:	93 e0       	ldi	r25, 0x03	; 3
 234:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 238:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <__vector_21>:

// ADC Interrupt Service Routine
// Sets the Servo Position linearly inverted to the Slider position
ISR (ADC_vect){
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	// Slider value inversion and offsetting (256 Slider values - ADCH - 128 values offset = 128 - ADCH)
	setServoPosition(128 - ADCH); // Set servos' positions equally to the sliders inverted position
 264:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 268:	20 e8       	ldi	r18, 0x80	; 128
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	a9 01       	movw	r20, r18
 26e:	49 1b       	sub	r20, r25
 270:	51 09       	sbc	r21, r1
 272:	ca 01       	movw	r24, r20
 274:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <setServoPosition>
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_7>:

// Counting clock ticks for each wheel's Photo-Interrupter Sensor
ISR(TIMER2_COMPA_vect){
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
	microsFrontWheel++;
 2ac:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <microsFrontWheel>
 2b0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <microsFrontWheel+0x1>
 2b4:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <microsFrontWheel+0x2>
 2b8:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <microsFrontWheel+0x3>
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	a1 1d       	adc	r26, r1
 2c0:	b1 1d       	adc	r27, r1
 2c2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <microsFrontWheel>
 2c6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <microsFrontWheel+0x1>
 2ca:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <microsFrontWheel+0x2>
 2ce:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <microsFrontWheel+0x3>
	microsRearWheel++;
 2d2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <microsRearWheel>
 2d6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <microsRearWheel+0x1>
 2da:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <microsRearWheel+0x2>
 2de:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <microsRearWheel+0x3>
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	a1 1d       	adc	r26, r1
 2e6:	b1 1d       	adc	r27, r1
 2e8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <microsRearWheel>
 2ec:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <microsRearWheel+0x1>
 2f0:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <microsRearWheel+0x2>
 2f4:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <microsRearWheel+0x3>
}
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_1>:

// Front Photo-Interrupter Sensor Interrupt Service Routine
// Calculates the sensor's pulse width in tenths of microseconds
ISR(INT0_vect){
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	4f 93       	push	r20
 316:	5f 93       	push	r21
 318:	6f 93       	push	r22
 31a:	7f 93       	push	r23
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
	if(PIND & 1<<PORTD2){ // if interrupt is triggered on the rising edge store the starting time
 324:	4a 9b       	sbis	0x09, 2	; 9
 326:	11 c0       	rjmp	.+34     	; 0x34a <__vector_1+0x40>
		startFrontWheel = microsFrontWheel;
 328:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <microsFrontWheel>
 32c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <microsFrontWheel+0x1>
 330:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <microsFrontWheel+0x2>
 334:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <microsFrontWheel+0x3>
 338:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <startFrontWheel>
 33c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <startFrontWheel+0x1>
 340:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <startFrontWheel+0x2>
 344:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <startFrontWheel+0x3>
 348:	24 c0       	rjmp	.+72     	; 0x392 <__vector_1+0x88>
	}else{ // if interrupt is triggered on the falling edge sud starting time with current time to calculate the pulse's period
		frontWheelPeriod = microsFrontWheel-startFrontWheel;
 34a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <microsFrontWheel>
 34e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <microsFrontWheel+0x1>
 352:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <microsFrontWheel+0x2>
 356:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <microsFrontWheel+0x3>
 35a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <startFrontWheel>
 35e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <startFrontWheel+0x1>
 362:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <startFrontWheel+0x2>
 366:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <startFrontWheel+0x3>
 36a:	84 1b       	sub	r24, r20
 36c:	95 0b       	sbc	r25, r21
 36e:	a6 0b       	sbc	r26, r22
 370:	b7 0b       	sbc	r27, r23
 372:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <frontWheelPeriod>
 376:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <frontWheelPeriod+0x1>
 37a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <frontWheelPeriod+0x2>
 37e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <frontWheelPeriod+0x3>
		microsFrontWheel=0; // Restart time counting
 382:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <microsFrontWheel>
 386:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <microsFrontWheel+0x1>
 38a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <microsFrontWheel+0x2>
 38e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <microsFrontWheel+0x3>
	}
}
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <__vector_2>:

// Rear Photo-Interrupter Sensor Interrupt Service Routine
// Calculates the sensor's pulse width in tenths of microseconds
ISR(INT1_vect){
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	4f 93       	push	r20
 3b8:	5f 93       	push	r21
 3ba:	6f 93       	push	r22
 3bc:	7f 93       	push	r23
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
	if(PIND & 1<<PORTD3){ // if interrupt is triggered on the rising edge store the starting time
 3c6:	4b 9b       	sbis	0x09, 3	; 9
 3c8:	11 c0       	rjmp	.+34     	; 0x3ec <__vector_2+0x40>
		startRearWheel = microsRearWheel;
 3ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <microsRearWheel>
 3ce:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <microsRearWheel+0x1>
 3d2:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <microsRearWheel+0x2>
 3d6:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <microsRearWheel+0x3>
 3da:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <startRearWheel>
 3de:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <startRearWheel+0x1>
 3e2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <startRearWheel+0x2>
 3e6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <startRearWheel+0x3>
 3ea:	24 c0       	rjmp	.+72     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	}else{ // if interrupt is triggered on the falling edge sud starting time with current time to calculate the pulse's period
		rearWheelPeriod = microsRearWheel-startRearWheel;
 3ec:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <microsRearWheel>
 3f0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <microsRearWheel+0x1>
 3f4:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <microsRearWheel+0x2>
 3f8:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <microsRearWheel+0x3>
 3fc:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <startRearWheel>
 400:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <startRearWheel+0x1>
 404:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <startRearWheel+0x2>
 408:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <startRearWheel+0x3>
 40c:	84 1b       	sub	r24, r20
 40e:	95 0b       	sbc	r25, r21
 410:	a6 0b       	sbc	r26, r22
 412:	b7 0b       	sbc	r27, r23
 414:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 418:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 41c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 420:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
		microsRearWheel=0; // Restart time counting
 424:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <microsRearWheel>
 428:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <microsRearWheel+0x1>
 42c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <microsRearWheel+0x2>
 430:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <microsRearWheel+0x3>
	}
}
 434:	bf 91       	pop	r27
 436:	af 91       	pop	r26
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	7f 91       	pop	r23
 43e:	6f 91       	pop	r22
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <main>:

int main(void){
	ADCinit();
 44e:	0e 94 53 00 	call	0xa6	; 0xa6 <ADCinit>
	MicrosTimerInit();
 452:	0e 94 6b 00 	call	0xd6	; 0xd6 <MicrosTimerInit>
	PhotoInterruptersInit();
 456:	0e 94 76 00 	call	0xec	; 0xec <PhotoInterruptersInit>
	ServoPWMinit();
 45a:	0e 94 7c 00 	call	0xf8	; 0xf8 <ServoPWMinit>
	sei();
 45e:	78 94       	sei
 460:	ff cf       	rjmp	.-2      	; 0x460 <main+0x12>

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
