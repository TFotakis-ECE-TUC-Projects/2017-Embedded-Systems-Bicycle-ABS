
Milestone3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000398  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000398  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800104  00800104  00000430  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a55  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c4  00000000  00000000  00000f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000479  00000000  00000000  00001731  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047c  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ad  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000268d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_1>
   8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  9e:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADCinit>:
void Blink(){
	PORTC |= 1<<PORTC5;
	for(uint32_t i=0; i<delay;i++)
	_delay_us(10);
	PORTC = 0;
	for(uint32_t i=0; i<delay;i++)
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
  ae:	80 81       	ld	r24, Z
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	80 83       	st	Z, r24
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
  c8:	80 81       	ld	r24, Z
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	80 83       	st	Z, r24
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <MicrosTimerInit>:
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  dc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  e0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  e4:	84 e1       	ldi	r24, 0x14	; 20
  e6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  ea:	08 95       	ret

000000ec <PhotointerruptersInit>:
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	8d bb       	out	0x1d, r24	; 29
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  f6:	08 95       	ret

000000f8 <setServoPosition>:
  f8:	61 15       	cp	r22, r1
  fa:	71 05       	cpc	r23, r1
  fc:	21 f0       	breq	.+8      	; 0x106 <setServoPosition+0xe>
  fe:	61 30       	cpi	r22, 0x01	; 1
 100:	71 05       	cpc	r23, r1
 102:	21 f0       	breq	.+8      	; 0x10c <setServoPosition+0x14>
 104:	05 c0       	rjmp	.+10     	; 0x110 <setServoPosition+0x18>
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	25 b9       	out	0x05, r18	; 5
 10a:	02 c0       	rjmp	.+4      	; 0x110 <setServoPosition+0x18>
 10c:	24 e0       	ldi	r18, 0x04	; 4
 10e:	25 b9       	out	0x05, r18	; 5
 110:	e7 ed       	ldi	r30, 0xD7	; 215
 112:	f4 e0       	ldi	r31, 0x04	; 4
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <setServoPosition+0x1c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <setServoPosition+0x22>
 11a:	00 00       	nop
 11c:	18 16       	cp	r1, r24
 11e:	19 06       	cpc	r1, r25
 120:	5c f4       	brge	.+22     	; 0x138 <setServoPosition+0x40>
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	f5 e1       	ldi	r31, 0x15	; 21
 128:	fa 95       	dec	r31
 12a:	f1 f7       	brne	.-4      	; 0x128 <setServoPosition+0x30>
 12c:	00 00       	nop
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	82 17       	cp	r24, r18
 134:	93 07       	cpc	r25, r19
 136:	b9 f7       	brne	.-18     	; 0x126 <setServoPosition+0x2e>
 138:	15 b8       	out	0x05, r1	; 5
 13a:	45 e1       	ldi	r20, 0x15	; 21
 13c:	4a 95       	dec	r20
 13e:	f1 f7       	brne	.-4      	; 0x13c <setServoPosition+0x44>
 140:	00 00       	nop
 142:	08 95       	ret

00000144 <__vector_7>:
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <microsFrontWheel>
 15a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <microsFrontWheel+0x1>
 15e:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <microsFrontWheel+0x2>
 162:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <microsFrontWheel+0x3>
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	a1 1d       	adc	r26, r1
 16a:	b1 1d       	adc	r27, r1
 16c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <microsFrontWheel>
 170:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <microsFrontWheel+0x1>
 174:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <microsFrontWheel+0x2>
 178:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <microsFrontWheel+0x3>
 17c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <microsRearWheel>
 180:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <microsRearWheel+0x1>
 184:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <microsRearWheel+0x2>
 188:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <microsRearWheel+0x3>
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <microsRearWheel>
 196:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <microsRearWheel+0x1>
 19a:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <microsRearWheel+0x2>
 19e:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <microsRearWheel+0x3>
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_21>:
	_delay_us(10);
}

// Sets the PWM duty cycle to the value of the ADC0, when every conversion finishes
ISR (ADC_vect){
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
	if (lastValue!=ADCH){
 1da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 1e4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 1e8:	82 17       	cp	r24, r18
 1ea:	93 07       	cpc	r25, r19
 1ec:	a1 f0       	breq	.+40     	; 0x216 <__vector_21+0x62>
		setServoPosition(ADCH, 0);
 1ee:	c9 e7       	ldi	r28, 0x79	; 121
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
 1f2:	88 81       	ld	r24, Y
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 7c 00 	call	0xf8	; 0xf8 <setServoPosition>
		setServoPosition(ADCH, 1);
 1fe:	88 81       	ld	r24, Y
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 7c 00 	call	0xf8	; 0xf8 <setServoPosition>
		lastValue=ADCH;
 20a:	88 81       	ld	r24, Y
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 212:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	}
	//ADCSRA |= 1<<ADSC; // Start Conversions
	//_delay_ms(1);
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	7f 91       	pop	r23
 228:	6f 91       	pop	r22
 22a:	5f 91       	pop	r21
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_1>:

ISR(INT0_vect){
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
	if(PIND & (1<<PORTD2)){
 256:	4a 9b       	sbis	0x09, 2	; 9
 258:	11 c0       	rjmp	.+34     	; 0x27c <__vector_1+0x40>
		startFrontWheel = microsFrontWheel;
 25a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <microsFrontWheel>
 25e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <microsFrontWheel+0x1>
 262:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <microsFrontWheel+0x2>
 266:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <microsFrontWheel+0x3>
 26a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <startFrontWheel>
 26e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <startFrontWheel+0x1>
 272:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <startFrontWheel+0x2>
 276:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <startFrontWheel+0x3>
 27a:	24 c0       	rjmp	.+72     	; 0x2c4 <__vector_1+0x88>
		}else{
		delay = microsFrontWheel-startFrontWheel;
 27c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <microsFrontWheel>
 280:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <microsFrontWheel+0x1>
 284:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <microsFrontWheel+0x2>
 288:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <microsFrontWheel+0x3>
 28c:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <startFrontWheel>
 290:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <startFrontWheel+0x1>
 294:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <startFrontWheel+0x2>
 298:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <startFrontWheel+0x3>
 29c:	84 1b       	sub	r24, r20
 29e:	95 0b       	sbc	r25, r21
 2a0:	a6 0b       	sbc	r26, r22
 2a2:	b7 0b       	sbc	r27, r23
 2a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2ac:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2b0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
		microsFrontWheel=0;
 2b4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <microsFrontWheel>
 2b8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <microsFrontWheel+0x1>
 2bc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <microsFrontWheel+0x2>
 2c0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <microsFrontWheel+0x3>
	}
}
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_2>:

ISR(INT1_vect){
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
	if(PIND & (1<<PORTD3)){
 2f8:	4b 9b       	sbis	0x09, 3	; 9
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <__vector_2+0x40>
		startRearWheel = microsRearWheel;
 2fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <microsRearWheel>
 300:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <microsRearWheel+0x1>
 304:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <microsRearWheel+0x2>
 308:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <microsRearWheel+0x3>
 30c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <startRearWheel>
 310:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <startRearWheel+0x1>
 314:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <startRearWheel+0x2>
 318:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <startRearWheel+0x3>
 31c:	24 c0       	rjmp	.+72     	; 0x366 <__vector_2+0x88>
		}else{
		delay = microsRearWheel-startRearWheel;
 31e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <microsRearWheel>
 322:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <microsRearWheel+0x1>
 326:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <microsRearWheel+0x2>
 32a:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <microsRearWheel+0x3>
 32e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <startRearWheel>
 332:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <startRearWheel+0x1>
 336:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <startRearWheel+0x2>
 33a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <startRearWheel+0x3>
 33e:	84 1b       	sub	r24, r20
 340:	95 0b       	sbc	r25, r21
 342:	a6 0b       	sbc	r26, r22
 344:	b7 0b       	sbc	r27, r23
 346:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 34a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 34e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 352:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
		microsRearWheel=0;
 356:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <microsRearWheel>
 35a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <microsRearWheel+0x1>
 35e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <microsRearWheel+0x2>
 362:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <microsRearWheel+0x3>
	}
}
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <main>:

int main(void){
	//DDRC |= 1<<DDC5; // Set PC5 as Output
	ADCinit();
 380:	0e 94 53 00 	call	0xa6	; 0xa6 <ADCinit>
	MicrosTimerInit();
 384:	0e 94 6b 00 	call	0xd6	; 0xd6 <MicrosTimerInit>
	PhotointerruptersInit();
 388:	0e 94 76 00 	call	0xec	; 0xec <PhotointerruptersInit>
	microsRearWheel++;
}

// Initializes PWM signal on PB1 & PB2 for front servo & back servo
void ServoPWMinit(){
	DDRB = 1<<DDB1 | 1<<DDB2; // Set PB1 & PB2 as outputs for OC1A and OC1B respectively
 38c:	86 e0       	ldi	r24, 0x06	; 6
 38e:	84 b9       	out	0x04, r24	; 4
	//DDRC |= 1<<DDC5; // Set PC5 as Output
	ADCinit();
	MicrosTimerInit();
	PhotointerruptersInit();
	ServoPWMinit();
	sei();
 390:	78 94       	sei
 392:	ff cf       	rjmp	.-2      	; 0x392 <main+0x12>

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
