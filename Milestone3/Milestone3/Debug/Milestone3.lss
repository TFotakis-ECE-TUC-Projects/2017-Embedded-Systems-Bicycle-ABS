
Milestone3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000464  000004f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800108  00800108  00000500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b4  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069d  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fc  00000000  00000000  00001531  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049b  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039c  00000000  00000000  00001f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002307  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 84 01 	jmp	0x308	; 0x308 <__vector_1>
   8:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 26 02 	call	0x44c	; 0x44c <main>
  9e:	0c 94 30 02 	jmp	0x460	; 0x460 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADCinit>:
uint32_t frontWheelPeriod = -1;
uint32_t rearWheelPeriod = -1;

// Todo: Check prescaler - Add comments
void ADCinit(){
	ADMUX = 1 << REFS0; // AVCC with external capacitor at AREF pin, ADC0 selected
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
	ADMUX |= 1<<ADLAR; // ADC Left Adjust Result to use ADCH register for 8-bit operations (ignore 2 Least Significant Bits)
  ae:	80 81       	ld	r24, Z
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	80 83       	st	Z, r24
	ADCSRA = 1 << ADEN; // Analog to Digital Enable
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADATE; // Auto Trigger Enable Conversion
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADIE; // ADC Conversion Complete Interrupt activated
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // Set prescaler to clk/128
  c8:	80 81       	ld	r24, Z
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADSC; // Start Conversions
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <MicrosTimerInit>:
}

// Todo: Check Comments
void MicrosTimerInit(){
	TCCR2A = 1<<WGM21; // Set Timer 2 to CTC mode, TOP = OCR2A, Immediate update of OCR2A, TOV Flag set on MAX, Normal port operation, OC2A disconnected
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = 1 << CS21; // Set prescaler to clk/8
  dc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK2 = 1 << OCIE2A; // Enable CTC interrupt
  e0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	OCR2A = 20; // Set TOP value to 20
  e4:	84 e1       	ldi	r24, 0x14	; 20
  e6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  ea:	08 95       	ret

000000ec <PhotoInterruptersInit>:
}

// Todo: Add comments
void PhotoInterruptersInit(){
	EIMSK = 1<<INT1 | 1<<INT0; // Enable INT0 and INT1
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0<<ISC11 | 1<<ISC10 | 0<<ISC01 | 1<<ISC00; // Trigger INT0 and INT1 on Change
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  f6:	08 95       	ret

000000f8 <ServoPWMinit>:
}

// Initializes PWM signal on PB1 & PB2 for front & back servo respectively
void ServoPWMinit(){
	DDRB = 1<<DDB1 | 1<<DDB2; // Set PB1 & PB2 as outputs for OC1A and OC1B respectively
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	84 b9       	out	0x04, r24	; 4
	TCCR1A|=1<<COM1A1 | 1<<COM1B1 | 1<<WGM11; //Non-Inverting mode - Set OC1A/OC1B on compare match when up-counting. Clear OC1A/OC1B on compare match when down counting.
  fc:	e0 e8       	ldi	r30, 0x80	; 128
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 6a       	ori	r24, 0xA2	; 162
 104:	80 83       	st	Z, r24
	TCCR1B|=1<<WGM13 | 1<<WGM12; // Fast PWM
 106:	e1 e8       	ldi	r30, 0x81	; 129
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 61       	ori	r24, 0x18	; 24
 10e:	80 83       	st	Z, r24
	TCCR1B|=1<<CS11; // Set prescaler to clk/8
 110:	80 81       	ld	r24, Z
 112:	82 60       	ori	r24, 0x02	; 2
 114:	80 83       	st	Z, r24
	ICR1=40000;	//fPWM=50Hz (Period = 20ms Standard).
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	9c e9       	ldi	r25, 0x9C	; 156
 11a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 11e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 122:	08 95       	ret

00000124 <checkWheelsFrequencies>:
}

int lastRetVal=0;
int checkWheelsFrequencies(){
	if (frontWheelPeriod == -1 || rearWheelPeriod == -1) return lastRetVal;
 124:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <frontWheelPeriod>
 128:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <frontWheelPeriod+0x1>
 12c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <frontWheelPeriod+0x2>
 130:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <frontWheelPeriod+0x3>
 134:	8f 3f       	cpi	r24, 0xFF	; 255
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	92 07       	cpc	r25, r18
 13a:	a2 07       	cpc	r26, r18
 13c:	b2 07       	cpc	r27, r18
 13e:	71 f0       	breq	.+28     	; 0x15c <checkWheelsFrequencies+0x38>
 140:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 144:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 148:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
 14c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
 150:	4f 3f       	cpi	r20, 0xFF	; 255
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	52 07       	cpc	r21, r18
 156:	62 07       	cpc	r22, r18
 158:	72 07       	cpc	r23, r18
 15a:	29 f4       	brne	.+10     	; 0x166 <checkWheelsFrequencies+0x42>
 15c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 160:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 164:	08 95       	ret
	int32_t difference = frontWheelPeriod-rearWheelPeriod;
 166:	84 1b       	sub	r24, r20
 168:	95 0b       	sbc	r25, r21
 16a:	a6 0b       	sbc	r26, r22
 16c:	b7 0b       	sbc	r27, r23
	frontWheelPeriod=-1;
 16e:	4f ef       	ldi	r20, 0xFF	; 255
 170:	5f ef       	ldi	r21, 0xFF	; 255
 172:	ba 01       	movw	r22, r20
 174:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <frontWheelPeriod>
 178:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <frontWheelPeriod+0x1>
 17c:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <frontWheelPeriod+0x2>
 180:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <frontWheelPeriod+0x3>
	rearWheelPeriod=-1;
 184:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 188:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
 18c:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_start+0x2>
 190:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_start+0x3>
	int retVal = 0;
	if(difference>0) retVal = 1;
 194:	18 16       	cp	r1, r24
 196:	19 06       	cpc	r1, r25
 198:	1a 06       	cpc	r1, r26
 19a:	1b 06       	cpc	r1, r27
 19c:	5c f0       	brlt	.+22     	; 0x1b4 <checkWheelsFrequencies+0x90>
	else if (difference<0) retVal = -1;
 19e:	88 27       	eor	r24, r24
 1a0:	b7 fd       	sbrc	r27, 7
 1a2:	83 95       	inc	r24
 1a4:	99 27       	eor	r25, r25
 1a6:	aa 27       	eor	r26, r26
 1a8:	bb 27       	eor	r27, r27
 1aa:	22 27       	eor	r18, r18
 1ac:	33 27       	eor	r19, r19
 1ae:	28 1b       	sub	r18, r24
 1b0:	39 0b       	sbc	r19, r25
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <checkWheelsFrequencies+0x94>
	if (frontWheelPeriod == -1 || rearWheelPeriod == -1) return lastRetVal;
	int32_t difference = frontWheelPeriod-rearWheelPeriod;
	frontWheelPeriod=-1;
	rearWheelPeriod=-1;
	int retVal = 0;
	if(difference>0) retVal = 1;
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
	else if (difference<0) retVal = -1;
	lastRetVal=retVal;
 1b8:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <__data_end+0x1>
 1bc:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
	return retVal;
 1c0:	82 2f       	mov	r24, r18
 1c2:	93 2f       	mov	r25, r19
}
 1c4:	08 95       	ret

000001c6 <setServoPosition>:

// Todo: Add comments
void setServoPosition(int value){
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	d8 2f       	mov	r29, r24
 1cc:	c9 2f       	mov	r28, r25
	int checkWheelsFrequenciesValue = checkWheelsFrequencies();
 1ce:	0e 94 92 00 	call	0x124	; 0x124 <checkWheelsFrequencies>
 1d2:	2d 2f       	mov	r18, r29
 1d4:	3c 2f       	mov	r19, r28
 1d6:	33 23       	and	r19, r19
 1d8:	14 f4       	brge	.+4      	; 0x1de <setServoPosition+0x18>
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	2c 3e       	cpi	r18, 0xEC	; 236
 1e0:	31 05       	cpc	r19, r1
 1e2:	14 f0       	brlt	.+4      	; 0x1e8 <setServoPosition+0x22>
 1e4:	2b ee       	ldi	r18, 0xEB	; 235
 1e6:	30 e0       	ldi	r19, 0x00	; 0
	if(value>235) value=235;
	else if(value<0) value=0;
	OCR1A = 1000 + (checkWheelsFrequenciesValue == 1 ? 0 : value<<4);
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	91 05       	cpc	r25, r1
 1ec:	f9 f0       	breq	.+62     	; 0x22c <setServoPosition+0x66>
 1ee:	a9 01       	movw	r20, r18
 1f0:	42 95       	swap	r20
 1f2:	52 95       	swap	r21
 1f4:	50 7f       	andi	r21, 0xF0	; 240
 1f6:	54 27       	eor	r21, r20
 1f8:	40 7f       	andi	r20, 0xF0	; 240
 1fa:	54 27       	eor	r21, r20
 1fc:	48 51       	subi	r20, 0x18	; 24
 1fe:	5c 4f       	sbci	r21, 0xFC	; 252
 200:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 204:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 1000 + (checkWheelsFrequenciesValue == -1 ? 0 : value<<4);
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	49 f0       	breq	.+18     	; 0x21e <setServoPosition+0x58>
 20c:	22 95       	swap	r18
 20e:	32 95       	swap	r19
 210:	30 7f       	andi	r19, 0xF0	; 240
 212:	32 27       	eor	r19, r18
 214:	20 7f       	andi	r18, 0xF0	; 240
 216:	32 27       	eor	r19, r18
 218:	28 51       	subi	r18, 0x18	; 24
 21a:	3c 4f       	sbci	r19, 0xFC	; 252
 21c:	02 c0       	rjmp	.+4      	; 0x222 <setServoPosition+0x5c>
 21e:	28 ee       	ldi	r18, 0xE8	; 232
 220:	33 e0       	ldi	r19, 0x03	; 3
 222:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 226:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
}
 22a:	07 c0       	rjmp	.+14     	; 0x23a <setServoPosition+0x74>
// Todo: Add comments
void setServoPosition(int value){
	int checkWheelsFrequenciesValue = checkWheelsFrequencies();
	if(value>235) value=235;
	else if(value<0) value=0;
	OCR1A = 1000 + (checkWheelsFrequenciesValue == 1 ? 0 : value<<4);
 22c:	88 ee       	ldi	r24, 0xE8	; 232
 22e:	93 e0       	ldi	r25, 0x03	; 3
 230:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 234:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 238:	e9 cf       	rjmp	.-46     	; 0x20c <setServoPosition+0x46>
	OCR1B = 1000 + (checkWheelsFrequenciesValue == -1 ? 0 : value<<4);
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <__vector_21>:

// Sets the Servo PWM duty cycle to the value of the ADC0, when every conversion finishes
ISR (ADC_vect){
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	// 256-ADCH-128
	int value = 128 - ADCH; // Slider value inversion and offsetting
 262:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	setServoPosition(value);
 266:	20 e8       	ldi	r18, 0x80	; 128
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	a9 01       	movw	r20, r18
 26c:	49 1b       	sub	r20, r25
 26e:	51 09       	sbc	r21, r1
 270:	ca 01       	movw	r24, r20
 272:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <setServoPosition>
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_7>:

// Todo: Add comments
ISR(TIMER2_COMPA_vect){
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
	microsFrontWheel++;
 2aa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <microsFrontWheel>
 2ae:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <microsFrontWheel+0x1>
 2b2:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <microsFrontWheel+0x2>
 2b6:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <microsFrontWheel+0x3>
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	a1 1d       	adc	r26, r1
 2be:	b1 1d       	adc	r27, r1
 2c0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <microsFrontWheel>
 2c4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <microsFrontWheel+0x1>
 2c8:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <microsFrontWheel+0x2>
 2cc:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <microsFrontWheel+0x3>
	microsRearWheel++;
 2d0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <microsRearWheel>
 2d4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <microsRearWheel+0x1>
 2d8:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <microsRearWheel+0x2>
 2dc:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <microsRearWheel+0x3>
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	a1 1d       	adc	r26, r1
 2e4:	b1 1d       	adc	r27, r1
 2e6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <microsRearWheel>
 2ea:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <microsRearWheel+0x1>
 2ee:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <microsRearWheel+0x2>
 2f2:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <microsRearWheel+0x3>
}
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__vector_1>:

// Todo: Add comments
ISR(INT0_vect){
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
	if(PIND & 1<<PORTD2){
 322:	4a 9b       	sbis	0x09, 2	; 9
 324:	11 c0       	rjmp	.+34     	; 0x348 <__vector_1+0x40>
		startFrontWheel = microsFrontWheel;
 326:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <microsFrontWheel>
 32a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <microsFrontWheel+0x1>
 32e:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <microsFrontWheel+0x2>
 332:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <microsFrontWheel+0x3>
 336:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <startFrontWheel>
 33a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <startFrontWheel+0x1>
 33e:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <startFrontWheel+0x2>
 342:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <startFrontWheel+0x3>
 346:	24 c0       	rjmp	.+72     	; 0x390 <__vector_1+0x88>
	}else{
		frontWheelPeriod = microsFrontWheel-startFrontWheel;
 348:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <microsFrontWheel>
 34c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <microsFrontWheel+0x1>
 350:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <microsFrontWheel+0x2>
 354:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <microsFrontWheel+0x3>
 358:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <startFrontWheel>
 35c:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <startFrontWheel+0x1>
 360:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <startFrontWheel+0x2>
 364:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <startFrontWheel+0x3>
 368:	84 1b       	sub	r24, r20
 36a:	95 0b       	sbc	r25, r21
 36c:	a6 0b       	sbc	r26, r22
 36e:	b7 0b       	sbc	r27, r23
 370:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <frontWheelPeriod>
 374:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <frontWheelPeriod+0x1>
 378:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <frontWheelPeriod+0x2>
 37c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <frontWheelPeriod+0x3>
		microsFrontWheel=0;
 380:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <microsFrontWheel>
 384:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <microsFrontWheel+0x1>
 388:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <microsFrontWheel+0x2>
 38c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <microsFrontWheel+0x3>
	}
}
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <__vector_2>:

// Todo: Add comments
ISR(INT1_vect){
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	4f 93       	push	r20
 3b6:	5f 93       	push	r21
 3b8:	6f 93       	push	r22
 3ba:	7f 93       	push	r23
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
 3c0:	af 93       	push	r26
 3c2:	bf 93       	push	r27
	if(PIND & 1<<PORTD3){
 3c4:	4b 9b       	sbis	0x09, 3	; 9
 3c6:	11 c0       	rjmp	.+34     	; 0x3ea <__vector_2+0x40>
		startRearWheel = microsRearWheel;
 3c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <microsRearWheel>
 3cc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <microsRearWheel+0x1>
 3d0:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <microsRearWheel+0x2>
 3d4:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <microsRearWheel+0x3>
 3d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <startRearWheel>
 3dc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <startRearWheel+0x1>
 3e0:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <startRearWheel+0x2>
 3e4:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <startRearWheel+0x3>
 3e8:	24 c0       	rjmp	.+72     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	}else{
		rearWheelPeriod = microsRearWheel-startRearWheel;
 3ea:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <microsRearWheel>
 3ee:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <microsRearWheel+0x1>
 3f2:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <microsRearWheel+0x2>
 3f6:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <microsRearWheel+0x3>
 3fa:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <startRearWheel>
 3fe:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <startRearWheel+0x1>
 402:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <startRearWheel+0x2>
 406:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <startRearWheel+0x3>
 40a:	84 1b       	sub	r24, r20
 40c:	95 0b       	sbc	r25, r21
 40e:	a6 0b       	sbc	r26, r22
 410:	b7 0b       	sbc	r27, r23
 412:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 416:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 41a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 41e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
		microsRearWheel=0;
 422:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <microsRearWheel>
 426:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <microsRearWheel+0x1>
 42a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <microsRearWheel+0x2>
 42e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <microsRearWheel+0x3>
	}
}
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <main>:

int main(void){
	ADCinit();
 44c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADCinit>
	MicrosTimerInit();
 450:	0e 94 6b 00 	call	0xd6	; 0xd6 <MicrosTimerInit>
	PhotoInterruptersInit();
 454:	0e 94 76 00 	call	0xec	; 0xec <PhotoInterruptersInit>
	ServoPWMinit();
 458:	0e 94 7c 00 	call	0xf8	; 0xf8 <ServoPWMinit>
	sei();
 45c:	78 94       	sei
 45e:	ff cf       	rjmp	.-2      	; 0x45e <main+0x12>

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
